package com.hcis.ipr.warehouse.patentHouse.web;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.alibaba.fastjson.JSON;
import com.google.gson.JsonObject;
import com.hcis.ipanther.core.utils.JSONUtils;
import com.hcis.ipr.common.utils.ApiCode;
import com.hcis.ipr.common.utils.BaseApi;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import com.hcis.ipanther.common.attachment.utils.AttachmentUtils;
import com.hcis.ipanther.common.user.entity.User;
import com.hcis.ipanther.core.web.vo.SearchParam;
import com.hcis.ipr.core.entity.Response;
import com.hcis.ipr.core.web.controller.BaseController;
import net.sf.json.JSONObject;
import com.hcis.ipr.warehouse.patentHouse.service.IPatentMongoService;
/**
 * 专利数据-mongodb数据管理
 * @author 宗高金
 * @date 2019年5月27日
 */
@Controller
@RequestMapping("/warehouse/patenthouse")
public class PatentMongoController extends BaseController{

	@Autowired
	IPatentMongoService patentMongoService;
	
	/**
	 * 返回专利数据列表
	 * @return
	 */
	@RequestMapping("/patentList")
	public ModelAndView patentList(SearchParam searchParam) {
		ModelAndView mv = new ModelAndView("/warehouse/patent/listPatents");
		return mv;
	}
	@RequestMapping("/patentListData")
	@ResponseBody
	public Object patentListData(HttpServletRequest request,String title,String application_number){
		int pageNumber = Integer.parseInt(request.getParameter("page")); //获取当前页码
		int pageSize = Integer.parseInt(request.getParameter("rows")); //获取每页显示多少行
		SearchParam searchParam = new SearchParam();
		searchParam.getParamMap().put("application_number", application_number);
		searchParam.getParamMap().put("title", title);
		try {			
			//计算
			Map<String, Object> map = new HashMap<>();		
			//分页
			map = patentMongoService.selectJsonSearchParam(pageNumber,pageSize,searchParam);
			int fromIndex = pageSize*(pageNumber-1);
			int toIndex = pageSize*pageNumber;
			int total = (int)map.get("total"); //总条数
			if(toIndex>total) {
				toIndex = total;
			}
//			list = list.subList(fromIndex, toIndex); //分页
			return map;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "failed"; 
	}
	
	/**
	 * 跳转到专利管理tab页面
	 * @return
	 */
	@RequestMapping("/listTabs")
	public ModelAndView listPatentTabs(SearchParam searchParam,String id) {
		ModelAndView mv = new ModelAndView("/warehouse/patent/listTabs");
		mv.addObject("id", id);
		return mv;
	}
	
	@RequestMapping("/getPatentById")
	public ModelAndView getPatentById(SearchParam searchParam,String id){
		ModelAndView mv = new ModelAndView("/warehouse/patent/editPatent");
		JSONObject jsonObject = new JSONObject();
		/**
		 * searchParam 设置type参数,代表不同的集合，分别为1.patent;2.claim;3.decrible;4.history;5.photo;6.legal
		 */
		searchParam.getParamMap().put("id", id);
		searchParam.getParamMap().put("type", "1");
		jsonObject = patentMongoService.selectByPatentId(searchParam);
		mv.addObject("patentM",jsonObject);
		return mv;
	}

	@RequestMapping("/getPatent")
	@ResponseBody
	public BaseApi getPatentByAppNumber(String appNumber){
		BaseApi api = new BaseApi();
		try {
			//api.setData(patentMongoService.selectByPatentByAppNumber(appNumber));3
			JSONObject jsonObject = patentMongoService.selectByPatentByAppNumber(appNumber);
			if(jsonObject != null && jsonObject.size() > 0){
				String id = jsonObject.getString("_id");
				SearchParam searchParamLegal = new SearchParam();
				searchParamLegal.getParamMap().put("id", id);
				searchParamLegal.getParamMap().put("type", "6");
				JSONObject jsonObjectLegal = patentMongoService.selectByPatentId(searchParamLegal);
				Map<String, JSONObject> map = new HashMap<>(2);
				map.put("patent", jsonObject);
				map.put("legal", jsonObjectLegal);
				api.setData(map);
			}else {
				api.setCode(ApiCode.ERROR);
				api.setMsg("找不到此专利");
			}
		}catch (Exception e){
			e.printStackTrace();
			api.setCode(ApiCode.ERROR);
			api.setMsg(e.getMessage());
		}
		return api;
	}

	@RequestMapping("/getClaimById")
	public ModelAndView getClaimById(SearchParam searchParam,String id){
		ModelAndView mv = new ModelAndView("/warehouse/patent/editClaim");
		JSONObject jsonObject = new JSONObject();
		/**
		 * searchParam 设置type参数,代表不同的集合，分别为1.patent;2.claim;3.decrible;4.history;5.photo;6.legal
		 */
		searchParam.getParamMap().put("id", id);
		searchParam.getParamMap().put("type","2");
		jsonObject = patentMongoService.selectByPatentId(searchParam);
		mv.addObject("patentClaim",jsonObject);
		return mv;
	}
	
	@RequestMapping("/getLegalById")
	public ModelAndView getLegalById(SearchParam searchParam,String id){
		ModelAndView mv = new ModelAndView("/warehouse/patent/editLegal");
		JSONObject jsonObject = new JSONObject();
		/**
		 * searchParam 设置type参数,代表不同的集合，分别为1.patent;2.claim;3.decrible;4.history;5.photo;6.legal
		 */
		searchParam.getParamMap().put("id", id);
		searchParam.getParamMap().put("type", "6");
		jsonObject = patentMongoService.selectByPatentId(searchParam);
		mv.addObject("patentLegal",jsonObject);
		return mv;
	}
	
	@RequestMapping("/getPhotoById")
	public ModelAndView getPhotoById(SearchParam searchParam,String id){
		ModelAndView mv = new ModelAndView("/warehouse/patent/editPhoto");
		JSONObject jsonObject = new JSONObject();
		/**
		 * searchParam 设置type参数,代表不同的集合，分别为1.patent;2.claim;3.decrible;4.history;5.photo;6.legal
		 */
		searchParam.getParamMap().put("id", id);
		searchParam.getParamMap().put("type", "5");
		jsonObject = patentMongoService.selectByPatentId(searchParam);
		mv.addObject("patentPhoto",jsonObject);
		return mv;
	}
	
	@RequestMapping("/getDescribleById")
	public ModelAndView getDescribleById(SearchParam searchParam,String id){
		ModelAndView mv = new ModelAndView("/warehouse/patent/editDescirble");
		JSONObject jsonObject = new JSONObject();
		/**
		 * searchParam 设置type参数,代表不同的集合，分别为1.patent;2.claim;3.decrible;4.history;5.photo;6.legal
		 */
		searchParam.getParamMap().put("id", id);
		searchParam.getParamMap().put("type", "3");
		jsonObject = patentMongoService.selectByPatentId(searchParam);
		mv.addObject("patentMDes",jsonObject);
		return mv;
	}
	@RequestMapping("/getHistoryById")
	public ModelAndView getHistoryById(SearchParam searchParam,String id){
		ModelAndView mv = new ModelAndView("/warehouse/patent/editHistory");
		JSONObject jsonObject = new JSONObject();
		/**
		 * searchParam 设置type参数,代表不同的集合，分别为1.patent;2.claim;3.decrible;4.history;5.photo;6.legal
		 */
		searchParam.getParamMap().put("id", id);
		searchParam.getParamMap().put("type", "4");
		jsonObject = patentMongoService.selectByPatentId(searchParam);
		mv.addObject("userParttime",jsonObject);
		return mv;
	}
	
	@RequestMapping("/getPDFById")
	public ModelAndView getPDFById(SearchParam searchParam,String id){
		ModelAndView mv = new ModelAndView("/warehouse/patent/editPDFView");
		JSONObject jsonObject = new JSONObject();
		/**
		 * searchParam 设置type参数,代表不同的集合，分别为1.patent;2.claim;3.decrible;4.history;5.photo;6.legal
		 */
		searchParam.getParamMap().put("id", id);
		searchParam.getParamMap().put("type", "1");
		jsonObject = patentMongoService.selectByPatentId(searchParam);
		mv.addObject("patentPDF",jsonObject);
		return mv;
	}
	
	@RequestMapping("/goImport")
	public ModelAndView goImport(){
		ModelAndView mv = new ModelAndView("/warehouse/patent/addPatsJsonFile");
		return mv;
	}
	
	/**
	 * 保存用户的信息
	 * @param user 用户的信息
	 * @param upload 上传头像
	 * @param registerType 注册类型，一般的保存为空，注册为学员为student，注册为教师为teacher
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/patentSave")
	@ResponseBody
	public void patentSave(User user,@RequestParam(value="upload",required=false) MultipartFile upload,String registerType,HttpServletResponse response,String checkType,String code) throws Exception {
		/*
		 * 上传个人头像
		 */
		String info = AttachmentUtils.updateAvatar(user, upload, "avatar");
		Response _response = null;
		if(StringUtils.isNotEmpty(info)){
			_response = new Response(300,info);
		} else {
			/*
			 * 校验数据
			 * 用户名/账号/学号 和 身份证件号 唯一性校验
			 */
			SearchParam searchParam = new SearchParam();
			Map<String, Object> paramMap = searchParam.getParamMap();
			paramMap.put("userId", user.getId());
			paramMap.put("userName", user.getUserName());
			paramMap.put("paperworkNo", user.getPaperworkNo());
	
		}
		this.renderText(_response.toString(),response);
	}
	

	@RequestMapping("/patentJson")
	@ResponseBody
	public BaseApi patentJson(String id){
		BaseApi api = new BaseApi();

		try {
			SearchParam searchParam = new SearchParam();
			searchParam.getParamMap().put("id", id);
			searchParam.getParamMap().put("type", "1");
			api.setData(patentMongoService.selectByPatentId(searchParam));
		}catch (Exception e){
			api.setError(e.getMessage());
		}
		return api;
	}

	@RequestMapping("/import")
	@ResponseBody
	public BaseApi importByJson(DefaultMultipartHttpServletRequest request){
		BaseApi api = new BaseApi();
		String jsonStr = "";
		try {
			MultipartFile file = ((MultipartHttpServletRequest) request).getFile("uploadFile");
			InputStream inputStream = file.getInputStream();
			Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
			int ch = 0;
			StringBuffer sb = new StringBuffer();
			while ((ch = reader.read()) != -1) {
				sb.append((char) ch);
			}
			reader.close();
			jsonStr = sb.toString();

			Object[] objs = JSONUtils.getJSONArray(jsonStr);
			com.alibaba.fastjson.JSONObject jsonObject = JSON.parseObject(jsonStr);
			int idx = objs.length;

		}catch (Exception e){
			e.printStackTrace();
			api.setError(e.getMessage());
		}
		return api;
	}
}
